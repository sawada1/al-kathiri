{"version":3,"file":"_id_-14b13a03.js","sources":["../../../../node_modules/nuxt/dist/app/composables/asyncData.js","../../../../node_modules/nuxt/dist/app/composables/fetch.js","../../../../pages/corporate/[id].vue"],"sourcesContent":["import { getCurrentInstance, onBeforeMount, onServerPrefetch, onUnmounted, ref, toRef, unref, watch } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { createError } from \"./error.js\";\nconst getDefault = () => null;\nexport function useAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  let [key, handler, options = {}] = args;\n  if (typeof key !== \"string\") {\n    throw new TypeError(\"[nuxt] [asyncData] key must be a string.\");\n  }\n  if (typeof handler !== \"function\") {\n    throw new TypeError(\"[nuxt] [asyncData] handler must be a function.\");\n  }\n  options.server = options.server ?? true;\n  options.default = options.default ?? getDefault;\n  options.lazy = options.lazy ?? false;\n  options.immediate = options.immediate ?? true;\n  const nuxt = useNuxtApp();\n  const getCachedData = () => nuxt.isHydrating ? nuxt.payload.data[key] : nuxt.static.data[key];\n  const hasCachedData = () => getCachedData() !== void 0;\n  if (!nuxt._asyncData[key]) {\n    nuxt._asyncData[key] = {\n      data: ref(getCachedData() ?? options.default?.() ?? null),\n      pending: ref(!hasCachedData()),\n      error: toRef(nuxt.payload._errors, key)\n    };\n  }\n  const asyncData = { ...nuxt._asyncData[key] };\n  asyncData.refresh = asyncData.execute = (opts = {}) => {\n    if (nuxt._asyncDataPromises[key]) {\n      if (opts.dedupe === false) {\n        return nuxt._asyncDataPromises[key];\n      }\n      nuxt._asyncDataPromises[key].cancelled = true;\n    }\n    if (opts._initial && hasCachedData()) {\n      return getCachedData();\n    }\n    asyncData.pending.value = true;\n    const promise = new Promise(\n      (resolve, reject) => {\n        try {\n          resolve(handler(nuxt));\n        } catch (err) {\n          reject(err);\n        }\n      }\n    ).then((_result) => {\n      if (promise.cancelled) {\n        return nuxt._asyncDataPromises[key];\n      }\n      let result = _result;\n      if (options.transform) {\n        result = options.transform(_result);\n      }\n      if (options.pick) {\n        result = pick(result, options.pick);\n      }\n      asyncData.data.value = result;\n      asyncData.error.value = null;\n    }).catch((error) => {\n      if (promise.cancelled) {\n        return nuxt._asyncDataPromises[key];\n      }\n      asyncData.error.value = error;\n      asyncData.data.value = unref(options.default?.() ?? null);\n    }).finally(() => {\n      if (promise.cancelled) {\n        return;\n      }\n      asyncData.pending.value = false;\n      nuxt.payload.data[key] = asyncData.data.value;\n      if (asyncData.error.value) {\n        nuxt.payload._errors[key] = createError(asyncData.error.value);\n      }\n      delete nuxt._asyncDataPromises[key];\n    });\n    nuxt._asyncDataPromises[key] = promise;\n    return nuxt._asyncDataPromises[key];\n  };\n  const initialFetch = () => asyncData.refresh({ _initial: true });\n  const fetchOnServer = options.server !== false && nuxt.payload.serverRendered;\n  if (process.server && fetchOnServer && options.immediate) {\n    const promise = initialFetch();\n    if (getCurrentInstance()) {\n      onServerPrefetch(() => promise);\n    } else {\n      nuxt.hook(\"app:created\", () => promise);\n    }\n  }\n  if (process.client) {\n    const instance = getCurrentInstance();\n    if (instance && !instance._nuxtOnBeforeMountCbs) {\n      instance._nuxtOnBeforeMountCbs = [];\n      const cbs = instance._nuxtOnBeforeMountCbs;\n      if (instance) {\n        onBeforeMount(() => {\n          cbs.forEach((cb) => {\n            cb();\n          });\n          cbs.splice(0, cbs.length);\n        });\n        onUnmounted(() => cbs.splice(0, cbs.length));\n      }\n    }\n    if (fetchOnServer && nuxt.isHydrating && hasCachedData()) {\n      asyncData.pending.value = false;\n    } else if (instance && (nuxt.payload.serverRendered && nuxt.isHydrating || options.lazy) && options.immediate) {\n      instance._nuxtOnBeforeMountCbs.push(initialFetch);\n    } else if (options.immediate) {\n      initialFetch();\n    }\n    if (options.watch) {\n      watch(options.watch, () => asyncData.refresh());\n    }\n    const off = nuxt.hook(\"app:data:refresh\", (keys) => {\n      if (!keys || keys.includes(key)) {\n        return asyncData.refresh();\n      }\n    });\n    if (instance) {\n      onUnmounted(off);\n    }\n  }\n  const asyncDataPromise = Promise.resolve(nuxt._asyncDataPromises[key]).then(() => asyncData);\n  Object.assign(asyncDataPromise, asyncData);\n  return asyncDataPromise;\n}\nexport function useLazyAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [key, handler, options] = args;\n  return useAsyncData(key, handler, { ...options, lazy: true }, null);\n}\nexport function useNuxtData(key) {\n  const nuxt = useNuxtApp();\n  if (!(key in nuxt.payload.data)) {\n    nuxt.payload.data[key] = null;\n  }\n  return {\n    data: toRef(nuxt.payload.data, key)\n  };\n}\nexport async function refreshNuxtData(keys) {\n  if (process.server) {\n    return Promise.resolve();\n  }\n  const _keys = keys ? Array.isArray(keys) ? keys : [keys] : void 0;\n  await useNuxtApp().hooks.callHookParallel(\"app:data:refresh\", _keys);\n}\nexport function clearNuxtData(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.data);\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : Array.isArray(keys) ? keys : [keys];\n  for (const key of _keys) {\n    if (key in nuxtApp.payload.data) {\n      nuxtApp.payload.data[key] = void 0;\n    }\n    if (key in nuxtApp.payload._errors) {\n      nuxtApp.payload._errors[key] = void 0;\n    }\n    if (nuxtApp._asyncData[key]) {\n      nuxtApp._asyncData[key].data.value = void 0;\n      nuxtApp._asyncData[key].error.value = void 0;\n      nuxtApp._asyncData[key].pending.value = false;\n    }\n    if (key in nuxtApp._asyncDataPromises) {\n      nuxtApp._asyncDataPromises[key] = void 0;\n    }\n  }\n}\nfunction pick(obj, keys) {\n  const newObj = {};\n  for (const key of keys) {\n    newObj[key] = obj[key];\n  }\n  return newObj;\n}\n","import { computed, reactive, unref } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useRequestFetch } from \"./ssr.js\";\nimport { useAsyncData } from \"./asyncData.js\";\nexport function useFetch(request, arg1, arg2) {\n  const [opts = {}, autoKey] = typeof arg1 === \"string\" ? [{}, arg1] : [arg1, arg2];\n  const _key = opts.key || hash([autoKey, unref(opts.baseURL), typeof request === \"string\" ? request : \"\", unref(opts.params || opts.query)]);\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useFetch] key must be a string: \" + _key);\n  }\n  if (!request) {\n    throw new Error(\"[nuxt] [useFetch] request is missing.\");\n  }\n  const key = _key === autoKey ? \"$f\" + _key : _key;\n  const _request = computed(() => {\n    let r = request;\n    if (typeof r === \"function\") {\n      r = r();\n    }\n    return unref(r);\n  });\n  if (!opts.baseURL && typeof _request.value === \"string\" && _request.value.startsWith(\"//\")) {\n    throw new Error('[nuxt] [useFetch] the request URL must not start with \"//\".');\n  }\n  const {\n    server,\n    lazy,\n    default: defaultFn,\n    transform,\n    pick,\n    watch,\n    immediate,\n    ...fetchOptions\n  } = opts;\n  const _fetchOptions = reactive({\n    ...fetchOptions,\n    cache: typeof opts.cache === \"boolean\" ? void 0 : opts.cache\n  });\n  const _asyncDataOptions = {\n    server,\n    lazy,\n    default: defaultFn,\n    transform,\n    pick,\n    immediate,\n    watch: watch === false ? [] : [_fetchOptions, _request, ...watch || []]\n  };\n  let controller;\n  const asyncData = useAsyncData(key, () => {\n    controller?.abort?.();\n    controller = typeof AbortController !== \"undefined\" ? new AbortController() : {};\n    const isLocalFetch = typeof _request.value === \"string\" && _request.value.startsWith(\"/\");\n    let _$fetch = opts.$fetch || globalThis.$fetch;\n    if (process.server && !opts.$fetch && isLocalFetch) {\n      _$fetch = useRequestFetch();\n    }\n    return _$fetch(_request.value, { signal: controller.signal, ..._fetchOptions });\n  }, _asyncDataOptions);\n  return asyncData;\n}\nexport function useLazyFetch(request, arg1, arg2) {\n  const [opts, autoKey] = typeof arg1 === \"string\" ? [{}, arg1] : [arg1, arg2];\n  return useFetch(\n    request,\n    {\n      ...opts,\n      lazy: true\n    },\n    // @ts-expect-error we pass an extra argument with the resolved auto-key to prevent another from being injected\n    autoKey\n  );\n}\n","<template>\r\n    <div>\r\n          <div class=\"purchasee container\">\r\n           <div class=\"row\">\r\n             <div class=\"col-12 col-xl-7 col-lg-7 \">\r\n                <h3 class=\"head\">PURCHASE ORDER</h3>\r\n                <div class=\"individual\">\r\n                 \r\n                  <form  action=\"\" @submit.prevent>\r\n                   <div class=\"header\">\r\n                    <nuxt-link :to=\"`/purchase/individuals/${mainCar.id}`\">\r\n                    <p class=\"first\" @click=\"typeActive = 1\" :class=\"{'active': typeActive == 1}\">individuals</p>                   \r\n                   </nuxt-link>\r\n                   <nuxt-link :to=\"`/corporate/${mainCar.id}`\">\r\n                    <p @click=\"typeActive = 2\" :class=\"{'active': typeActive == 2}\">corporate</p>                   \r\n                   </nuxt-link>\r\n                  </div>\r\n                     <div class=\"method\">\r\n                        <h4>payment method</h4>\r\n                         <div class=\"choose\">\r\n                             <span @click=\"methodActive = 1\" :class=\"{'active':methodActive == 1}\">finance</span>\r\n                             <span @click=\"methodActive = 2\" :class=\"{'active':methodActive == 2}\">cash</span>\r\n                         </div>\r\n                     </div>\r\n                     <div class=\"finance\" :class=\"{'active':methodActive == 1}\">\r\n                        <div class=\"inp special\" v-for=\"item,index in form\" :key=\"item\">\r\n                        <label for=\"\">The selected vehicle *</label>\r\n                        <input class=\"bigOne\" type=\"text\" placeholder=\"Vehicle name\" v-model=\"item.name\">\r\n                        <input type=\"number\" placeholder=\"the number\" v-model=\"item.price\">\r\n                        <div class=\"d-flex align-items-center gap-2\">\r\n                        <i @click=\"addRow()\" class=\"fa-solid fa-plus\"></i>\r\n                       <i v-if=\"form.length > 1\" @click=\"removeRow()\" class=\"fa-solid fa-minus\"></i>\r\n                        </div>\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">Company Name *</label>\r\n                        <input type=\"text\" placeholder=\"Company Name..\">\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">Official email *</label>\r\n                        <input type=\"text\" placeholder=\"example@mail.com\">\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">The Chief Executive Officer (CEO) *</label>\r\n                        <input type=\"text\" placeholder=\"The Chief Executive Officer (CEO) ...\">\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">Mobile number *</label>\r\n                        <input type=\"text\" placeholder=\"05xxxxxxxx...\">\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">The company's headquarter* </label>\r\n                        <input type=\"text\" placeholder=\"city...\">\r\n                     </div>\r\n                        <div class=\"inp\">\r\n                        <label for=\"\">Company activity (According to the record) *</label>\r\n                        <select>\r\n                            <option value=\"\">Company activity (According to the record)</option>\r\n                        </select>\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">Company age *</label>\r\n                         <input type=\"number\" name=\"\" value=\"0\">\r\n                     </div>\r\n\r\n                      <div class=\"inp\">\r\n                        <label for=\"\">Bank account*</label>\r\n                        <select>\r\n                            <option value=\"\">select bank..</option>\r\n                        </select>\r\n                     </div>\r\n                   \r\n                     </div>\r\n                     <div class=\"corporate\" :class=\"{'active':methodActive == 2}\" >\r\n                       <div class=\"inp special\">\r\n                        <label for=\"\">The selected vehicle *</label>\r\n                        <input class=\"bigOne\" type=\"text\" placeholder=\"Vehicle name\" >\r\n                        <input type=\"text\" placeholder=\"the number\">\r\n                       <i class=\"fa-solid fa-plus\"></i>\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">Company Name *</label>\r\n                        <input type=\"text\" placeholder=\"Company Name..\">\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">Official email *</label>\r\n                        <input type=\"text\" placeholder=\"example@mail.com\">\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">The Chief Executive Officer (CEO) *</label>\r\n                        <input type=\"text\" placeholder=\"The Chief Executive Officer (CEO) ...\">\r\n                     </div>\r\n                     <div class=\"inp\">\r\n                        <label for=\"\">Mobile number *</label>\r\n                        <input type=\"text\" placeholder=\"05xxxxxxxx...\">\r\n                     </div>\r\n                     </div>\r\n                      <button type=\"\" @click=\"sendCorporate()\">send</button>\r\n                  </form>\r\n                  \r\n                </div>\r\n             </div>\r\n             <div class=\"col-12 col-xl-5 col-lg-5  thefixed\">\r\n               <p>Lorem, ipsum dolor sit amet consectetur \r\n               adipisicing elit. Earum quibusdam aspernatur\r\n                accusantium obcaecati maiores laborum libero\r\n                 quam exercitationem sapiente consectetur,\r\n                molestias ratione in cumque amet nulla \r\n                similique facilis ipsam praesentium.</p>\r\n                 <div class=\"icons\">\r\n                  <div class=\"icon d-flex align-items-center gap-3\">\r\n                   <i class=\"fa-solid fa-phone\"></i>\r\n                    <h4>mobile number: <span>05000000</span></h4>\r\n                  </div>\r\n                  <div class=\"icon d-flex align-items-center gap-3\">\r\n                   <i class=\"fa-solid fa-envelope\"></i>\r\n                      <h4>email: <span> example@mail.com</span></h4>\r\n                  </div>\r\n                  <div class=\"icon d-flex align-items-center gap-3\">\r\n                <i class=\"fa-brands fa-whatsapp\"></i>\r\n                <h4>Whatsapp: <span class=\"click\">click here</span></h4>\r\n                  </div>\r\n                 </div>\r\n                 <p class=\"text\">\r\n                  Or please fill the form below: You will receive \r\n                  a reply within a maximum of 24 hours.\r\n                 </p>\r\n             </div>\r\n           </div>\r\n       </div>\r\n  \r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nlet url = getUrl();\r\nlet { id } = useRoute().params;\r\nconst { data: car } = await useFetch(`${url}/cars/${id}`);\r\nconst mainCar = ref(car.value.data);\r\nlet methodActive = ref(1);\r\nlet typeActive = ref(2);\r\n    const form = ref([\r\n      { name : '', price: 0}\r\n    ])\r\n\r\n    const addRow = () => {\r\n       form.value.push({ name: '', price: 0 });\r\n       console.log(form.value);\r\n    }\r\n\r\n    const removeRow = (index) =>{\r\n      if(form.value.length > 1){\r\n         form.value.splice(index, 1);\r\n       }\r\n       console.log(form.value);\r\n    }\r\n\r\n    const saveItem = () =>{\r\n      axios.post('items',form).then(res=>{\r\n        console.log(res);\r\n      })\r\n}\r\n\r\nlet objContact = ref({\r\n   payment_type: '',\r\n   cars:form.value\r\n   \r\n})\r\nconst sendCorporate = async () => {\r\n     const result = await fetch(`${url}/corporates-orders`, {\r\n    method: 'POST',\r\n    headers: {\r\n     \r\n    },\r\n    body:JSON.stringify(objContact.value),\r\n\r\n  }).then((response) => response.json())\r\n    .then((json) => {\r\n      console.log(json);\r\n     \r\n    \r\n\r\n      \r\n    });\r\n\r\n}  \r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n\r\n</style>"],"names":["_a","pick"],"mappings":"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","x_google_ignoreList":[0,1]}